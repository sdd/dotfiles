set-option global startup_info_version 20200901

# load plugins from plugin manager
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "alexherbo2/kakoune-dracula-theme" theme
plug "jdugan6240/powerline.kak" defer powerline %{
    powerline-theme gruvbox
    powerline-separator arrow
    powerline-toggle-module client
} config %{
    powerline-start
}

plug "andreyorst/fzf.kak"
plug "occivink/kakoune-snippets"
plug "occivink/kakoune-vertical-selection" subset %{ vertical-selection.kak }
plug "krornus/kakoune-mouvre"
plug "krornus/kakoune-cargo"

plug "ul/kak-lsp" do %{
    cargo build --release --locked
    cargo install --force
    ln -sf target/release/kak-lsp ~/.local/bin/
} config %{
    set-option global lsp_diagnostic_line_error_sign '!'
    set-option global lsp_diagnostic_line_warning_sign '?'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    hook global KakEnd .* lsp-exit    
}

nop %sh{ (kak-lsp -s $kak_session -vvv --config ~/.config/kak/plugins/kak-lsp/kak-lsp.toml ) > /tmp/kak-lsp.log 2>&1 < /dev/null & }

lsp-enable

colorscheme dracula

# show line numbers
addhl global/ number-lines

# shw matching brackets
addhl global/ show-matching

# highlight 80th column background gray
addhl global/ column 80 default,rgb:404040

set global indentwidth 4
set global tabstop 4
set global ui_options ncurses_assistant=none

# kakoune-snippets: don't auto trigger
set-option global snippets_auto_expand false
map global insert <a-space> '<a-;>: snippets-expand-trigger %{exec "b"}<ret>'
map global insert <a-n> '<a-;>: snippets-select-next-placeholders<ret>'

# eslint
hook global WinSetOption filetype=javascript %{
    set buffer lintcmd 'eslint --config .eslintrc.js --format=node_modules/eslint-formatter-kakoune'
    lint-enable
    lint
}

# prettier
hook global WinSetOption filetype=javascript %{
    set buffer formatcmd 'prettier --parser=babel'
    lint-enable
    lint
}

# kakoune-cargo
hook -group make-rust global WinSetOption filetype=rust %[
    set-option window makecmd cargo
    set-option global compiler cargo
]

# keys for vertical-selection.kak
map global normal <a-V> :select-up<ret>
map global normal <a-v> :select-down<ret>
map global normal V :select-vertically<ret>

# keys for phantom selection
map global normal <a-f> ": phantom-sel-iterate-next<ret>"
map global normal <a-F> ": phantom-sel-select-all; phantom-sel-clear<ret>"

# press hash to comment line
map global normal '#' ':comment-line<ret>'

# enter command mode with ; instead of :
map global normal ';' ':' 

# ~/Software/kakoune-buffers Buffer control mappings
hook global WinDisplay .* info-buffers
map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'

map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

# ~/Software/kakoune-cd CD mappings
map global goto d '<esc>:change-directory-current-buffer<ret>' -docstring 'current buffer dir'
map global goto r '<esc>:change-directory-project-root<ret>' -docstring 'project root dir'
map global goto p '<esc>:cd ..;print-working-directory<ret>' -docstring 'parent dir'
map global user e ':edit-current-buffer-directory<ret>' -docstring 'edit in current buffer dir'
alias global cdd change-directory-current-buffer
alias global cdr change-directory-project-root
alias global pwd print-working-directory
alias global ecd edit-current-buffer-directory

# FZF plugin configuration
map global normal <c-p> ': fzf-mode<ret>'

# keys for goto-file.kak autoloaded plugin
map global goto f '<esc>Lgoto-file<ret>' -docstring 'file'
map global goto F f -docstring 'file (legacy)'

# use # to comment line and a-# to comment block
map global normal '#' :comment-line<ret> -docstring 'comment line'
map global normal '<a-#>' :comment-block<ret> -docstring 'comment block'

# copy selection to system clipboard on yank / cut / cut-replace (y/c/d)
hook global NormalKey y|d|c %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}

# user-p and user-P: paste after/before from sys clipboard
map global user P '!xsel --output --clipboard<ret>'
map global user p '<a-!>xsel --output --clipboard<ret>'

# alt-p paste at current position in insert mode
map global insert <a-p> '<a-;>P'

map global insert <tab>   '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'

hook global InsertCompletionShow .* %{
     try %{
            # this command temporarily removes cursors preceded by whitespace;
            # if there are no cursors left, it raises an error, does not
            # continue to execute the mapping commands, and the error is eaten
            # by the `try` command so no warning appears.
            execute-keys -draft 'h<a-K>\h<ret>'
            map window insert <tab> <c-n>
            map window insert <s-tab> <c-p>
            #map window insert <ret> <right>
      }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
    unmap window insert <ret> <right>
}


